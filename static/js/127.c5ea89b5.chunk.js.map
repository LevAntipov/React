{"version":3,"file":"static/js/127.c5ea89b5.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/DialogChats/DialogChats.module.css?ad90","components/Dialogs/DialogChats/DialogChats.jsx","webpack://my-app/./src/components/Dialogs/DialogMessages/DialogMessages.module.css?5154","components/Dialogs/DialogMessages/MessageForm.jsx","components/Dialogs/DialogMessages/DialogMessage.jsx","components/Dialogs/DialogMessages/DialogMessagesContainer.jsx","hoc/withAuthRedirect.js","components/Dialogs/Dialogs.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__jdV5q\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs__chat\":\"DialogChats_dialogs__chat__7nfTs\",\"dialogs__chat__item\":\"DialogChats_dialogs__chat__item__Gi8MF\",\"dialogs__chat__item__img\":\"DialogChats_dialogs__chat__item__img__soyuw\"};","import { NavLink } from 'react-router'\r\nimport classes from './DialogChats.module.css'\r\nimport { useStore } from 'react-redux'\r\n\r\nfunction DialogChats() {\r\n\r\n    // Нужно будет исправить, DialogChats - презентационная компонента, сюда не должен приходить store\r\n    // Либо обернуть выше в контейнер, либо еще что-то\r\n    //let dialogs = props.store.getState().messagesPage.dialogsData\r\n    const store = useStore()\r\n    let dialogs = store.getState().messagesPage.dialogsData\r\n    \r\n    \r\n    const ChatItem = (props) => {\r\n        return (\r\n            <div className={classes.dialogs__chat__item}>\r\n                <div className={classes.dialogs__chat__item__img}>\r\n                  {/*  <img src={props.avatar} />*/}\r\n                </div>\r\n                <div>\r\n                    <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let renderDialogs = dialogs.map((item,index) => <ChatItem name={item.name} id={item.id} \r\n                                                                avatar={item.avatar} key ={index} />)\r\n\r\n    return (\r\n        <div className={classes.dialogs__chat}>\r\n            {renderDialogs}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogChats;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs__message\":\"DialogMessages_dialogs__message__yl8Df\",\"dialogs__message__item\":\"DialogMessages_dialogs__message__item__9Mgc1\"};","import { useForm, SubmitHandler } from 'react-hook-form';\r\n\r\nexport const MessageForm = (props) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors },\r\n    } = useForm({\r\n        mode: 'onChange' //отображение ошибки сразу при печати\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        props.addMessage(data.text)\r\n        reset()\r\n    };\r\n\r\n    //  console.log(watch(\"example\")); // watch input value by passing the name of it\r\n\r\n    return (\r\n        /* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            {/* register your input into the hook by invoking the \"register\" function */}\r\n            <textarea\r\n                placeholder='write something'\r\n                {...register(\"text\", {\r\n                    maxLength: 20,\r\n                    required: \"this field is required\",\r\n                    minLength: 3\r\n                })} \r\n            />\r\n\r\n\r\n            {(errors.textOfPost?.type === \"maxLength\" && <span>Max length is 20 symbols</span>)\r\n                || (errors.textOfPost?.type === \"minLength\" && <span>Min length is 3 symbols</span>)}\r\n\r\n            <button type=\"submit\">send</button>\r\n        </form>\r\n    );\r\n}","import React from 'react'\r\nimport classes from './DialogMessages.module.css'\r\nimport { MessageForm } from './MessageForm'\r\n\r\nconst DialogMessages = (props) => {\r\n\r\n    const MessageItem = (props) => {\r\n        return (\r\n            <div className={classes.dialogs__message__item}>\r\n                {props.message}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let renderMessages = props.messages.map((item, index) => <MessageItem key={index} message={item.message} />)\r\n\r\n    return (\r\n        <div className={classes.dialogs__message}>\r\n            <div>\r\n                {renderMessages}\r\n            </div>\r\n           {<MessageForm addMessage={props.addMessage}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogMessages;","import { addMessageActionCreator, updateNewMessageTextActionCreator } from '../../../redux/messagesReducer'\r\nimport DialogMessage from './DialogMessage'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagesPage.messagesData,\r\n        newMessageText: state.messagesPage.newMessageText,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (message) => {\r\n            dispatch(addMessageActionCreator(message))\r\n        },\r\n    }\r\n}\r\n\r\nconst DialogMessagesContainer = connect(mapStateToProps,mapDispatchToProps)(DialogMessage)\r\n\r\n\r\nexport default DialogMessagesContainer;","import React from 'react';\r\nimport { Navigate } from 'react-router';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to='/login' replace />\r\n            }\r\n            return (\r\n                <Component {...this.props} />\r\n            )\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import classes from './Dialogs.module.css'\r\nimport DialogChats from './DialogChats/DialogChats';\r\nimport DialogsMessagesContainer from './DialogMessages/DialogMessagesContainer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from \"redux\";\r\n\r\n\r\n\r\n\r\nfunction Dialogs(props) {\r\n    return (\r\n        <div className={classes.dialogs}>\r\n\r\n            <DialogChats />\r\n            <DialogsMessagesContainer />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\n//let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//let DialogsContainer = connect(mapStateToProps, {})(AuthRedirectComponent)\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["dialogs","useStore","getState","messagesPage","dialogsData","ChatItem","props","_jsxs","className","classes","children","_jsx","NavLink","to","id","name","renderDialogs","map","item","index","avatar","MessageForm","_errors$textOfPost","_errors$textOfPost2","register","handleSubmit","reset","formState","errors","useForm","mode","onSubmit","data","addMessage","text","_objectSpread","placeholder","maxLength","required","minLength","textOfPost","type","MessageItem","message","renderMessages","messages","connect","state","messagesData","newMessageText","dispatch","addMessageActionCreator","DialogMessage","mapStateToPropsForRedirect","isAuth","auth","compose","Component","RedirectComponent","React","render","this","Navigate","replace","DialogChats","DialogsMessagesContainer"],"sourceRoot":""}